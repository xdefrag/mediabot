// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/xdefrag/mediabot/db"

	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateResponse provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateResponse(ctx context.Context, arg db.CreateResponseParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateResponseParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResponse'
type Querier_CreateResponse_Call struct {
	*mock.Call
}

// CreateResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateResponseParams
func (_e *Querier_Expecter) CreateResponse(ctx interface{}, arg interface{}) *Querier_CreateResponse_Call {
	return &Querier_CreateResponse_Call{Call: _e.mock.On("CreateResponse", ctx, arg)}
}

func (_c *Querier_CreateResponse_Call) Run(run func(ctx context.Context, arg db.CreateResponseParams)) *Querier_CreateResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateResponseParams))
	})
	return _c
}

func (_c *Querier_CreateResponse_Call) Return(_a0 error) *Querier_CreateResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateResponse_Call) RunAndReturn(run func(context.Context, db.CreateResponseParams) error) *Querier_CreateResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateState provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateState(ctx context.Context, arg db.CreateStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateState'
type Querier_CreateState_Call struct {
	*mock.Call
}

// CreateState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStateParams
func (_e *Querier_Expecter) CreateState(ctx interface{}, arg interface{}) *Querier_CreateState_Call {
	return &Querier_CreateState_Call{Call: _e.mock.On("CreateState", ctx, arg)}
}

func (_c *Querier_CreateState_Call) Run(run func(ctx context.Context, arg db.CreateStateParams)) *Querier_CreateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateStateParams))
	})
	return _c
}

func (_c *Querier_CreateState_Call) Return(_a0 error) *Querier_CreateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateState_Call) RunAndReturn(run func(context.Context, db.CreateStateParams) error) *Querier_CreateState_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: ctx, userID
func (_m *Querier) GetState(ctx context.Context, userID int64) (db.State, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 db.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.State, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.State); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(db.State)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type Querier_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *Querier_Expecter) GetState(ctx interface{}, userID interface{}) *Querier_GetState_Call {
	return &Querier_GetState_Call{Call: _e.mock.On("GetState", ctx, userID)}
}

func (_c *Querier_GetState_Call) Run(run func(ctx context.Context, userID int64)) *Querier_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetState_Call) Return(_a0 db.State, _a1 error) *Querier_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetState_Call) RunAndReturn(run func(context.Context, int64) (db.State, error)) *Querier_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
